name: Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

concurrency:
  group: tf-misinfo-infra
  cancel-in-progress: true

jobs:
  apply:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      AWS_REGION: eu-north-1
      PROJECT_NAME: misinfo
      TFSTATE_BUCKET: misinfo-tfstate-eu-north-1-misinfo
      TFSTATE_KEY: infra/terraform.tfstate
      TF_LOCK_TABLE: misinfo-tf-locks

    steps:
      - uses: actions/checkout@v4

      - name: Zip Lambdas
        run: |
          set -euo pipefail
          mkdir -p dist
          (cd lambdas/ingest && zip -r ../../dist/ingest.zip .)
          (cd lambdas/api    && zip -r ../../dist/api.zip .)

      - name: Configure AWS via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      # ---------- kill the stale lock item up front (safe if no apply is running) ----------
      - name: Delete stale Terraform lock item (DynamoDB)
        run: |
          set -euo pipefail
          PK="${TFSTATE_BUCKET}/${TFSTATE_KEY}"
          echo "Deleting lock item with LockID=${PK} from ${TF_LOCK_TABLE} (best-effort)"
          aws dynamodb delete-item \
            --table-name "${TF_LOCK_TABLE}" \
            --key "{\"LockID\":{\"S\":\"${PK}\"}}" || true
      # -------------------------------------------------------------------------------------

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: infra
        env:
          TF_VAR_project_name: ${{ env.PROJECT_NAME }}
          TF_VAR_region: ${{ env.AWS_REGION }}
          TF_VAR_github_owner: ${{ github.repository_owner }}
          TF_VAR_github_repo:  ${{ github.event.repository.name }}
          TF_VAR_sources_json: ${{ secrets.TF_VAR_sources_json }}
        run: |
          set -euo pipefail
          terraform init -upgrade -lock-timeout=5m \
            -backend-config="bucket=${TFSTATE_BUCKET}" \
            -backend-config="key=${TFSTATE_KEY}" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=${TF_LOCK_TABLE}" \
            -backend-config="encrypt=true"

      # also try a force-unlock with the UUID from your logs (harmless if no lock)
      - name: Force unlock with known UUID (best-effort)
        working-directory: infra
        run: |
          set -euo pipefail
          terraform force-unlock -force 25987fdb-8820-15f5-6fa1-ca7403383f9f || true

      - name: Terraform Apply
        working-directory: infra
        env:
          TF_VAR_project_name: ${{ env.PROJECT_NAME }}
          TF_VAR_region: ${{ env.AWS_REGION }}
          TF_VAR_github_owner: ${{ github.repository_owner }}
          TF_VAR_github_repo:  ${{ github.event.repository.name }}
          TF_VAR_sources_json: ${{ secrets.TF_VAR_sources_json }}
        run: |
          set -euo pipefail
          terraform apply -lock-timeout=5m -auto-approve

      - name: Show outputs
        working-directory: infra
        run: terraform output

      # if anything fails/cancels, try to clear the lock again
      - name: Clear lock on failure/cancel (best-effort)
        if: failure() || cancelled()
        working-directory: infra
        run: |
          set -euo pipefail
          terraform force-unlock -force 25987fdb-8820-15f5-6fa1-ca7403383f9f || true
