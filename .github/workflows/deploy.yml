name: Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

concurrency:
  group: tf-misinfo-infra
  cancel-in-progress: true

jobs:
  apply:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      AWS_REGION: eu-north-1
      PROJECT_NAME: misinfo
      TFSTATE_BUCKET: misinfo-tfstate-eu-north-1-misinfo
      TFSTATE_KEY: infra/terraform.tfstate
      TF_LOCK_TABLE: misinfo-tf-locks

    steps:
      - uses: actions/checkout@v4

      - name: Zip Lambdas
        run: |
          mkdir -p dist
          (cd lambdas/ingest && zip -r ../../dist/ingest.zip .)
          (cd lambdas/api    && zip -r ../../dist/api.zip .)

      - name: Configure AWS via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      # Ensure remote backend infra exists (S3 + DynamoDB)
      - name: Ensure remote backend (S3 + DynamoDB)
        run: |
          set -euo pipefail

          if ! aws s3api head-bucket --bucket "${TFSTATE_BUCKET}" 2>/dev/null; then
            aws s3api create-bucket \
              --bucket "${TFSTATE_BUCKET}" \
              --create-bucket-configuration LocationConstraint="${AWS_REGION}"
          fi

          aws s3api put-bucket-versioning \
            --bucket "${TFSTATE_BUCKET}" \
            --versioning-configuration Status=Enabled || true

          if ! aws dynamodb describe-table --table-name "${TF_LOCK_TABLE}" >/dev/null 2>&1; then
            aws dynamodb create-table \
              --table-name "${TF_LOCK_TABLE}" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST
          fi

          # Wait for table ACTIVE (first-run race guard)
          for i in {1..30}; do
            STATUS=$(aws dynamodb describe-table --table-name "${TF_LOCK_TABLE}" --query 'Table.TableStatus' --output text)
            [ "$STATUS" = "ACTIVE" ] && break
            sleep 4
          done

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: infra
        env:
          TF_VAR_project_name: ${{ env.PROJECT_NAME }}
          TF_VAR_region: ${{ env.AWS_REGION }}
          TF_VAR_github_owner: ${{ github.repository_owner }}
          TF_VAR_github_repo:  ${{ github.event.repository.name }}
          TF_VAR_sources_json: ${{ secrets.TF_VAR_sources_json }}
        run: |
          terraform init -upgrade -lock-timeout=5m \
            -backend-config="bucket=${TFSTATE_BUCKET}" \
            -backend-config="key=${TFSTATE_KEY}" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=${TF_LOCK_TABLE}" \
            -backend-config="encrypt=true"

      # ---------- OPTION A: one-time force unlock using the known UUID ----------
      - name: Force unlock stale TF lock (one-time)
        working-directory: infra
        run: |
          set -euo pipefail
          terraform init -lock-timeout=5m \
            -backend-config="bucket=${TFSTATE_BUCKET}" \
            -backend-config="key=${TFSTATE_KEY}" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=${TF_LOCK_TABLE}" \
            -backend-config="encrypt=true"
          terraform force-unlock -force 25987fdb-8820-15f5-6fa1-ca7403383f9f || true
      # -------------------------------------------------------------------------

      - name: Terraform Imports (best-effort)
        working-directory: infra
        env:
          PROJECT_NAME: ${{ env.PROJECT_NAME }}
        run: |
          set -euo pipefail
          TABLE_NAME="${PROJECT_NAME}-items"
          LOG_INGEST="/aws/lambda/${PROJECT_NAME}-ingest"
          LOG_API="/aws/lambda/${PROJECT_NAME}-api"
          ROLE_INGEST="${PROJECT_NAME}-ingest-role"
          ROLE_API="${PROJECT_NAME}-api-role"
          RULE_NAME="${PROJECT_NAME}-schedule"
          API_NAME="${PROJECT_NAME}-api"

          aws dynamodb describe-table --table-name "$TABLE_NAME" >/dev/null 2>&1 \
            && terraform import -allow-missing-config aws_dynamodb_table.items "$TABLE_NAME" || true

          aws logs describe-log-groups --log-group-name-prefix "$LOG_INGEST" --query 'logGroups[?logGroupName==`'"$LOG_INGEST"'`]' --output text | grep -q . \
            && terraform import -allow-missing-config aws_cloudwatch_log_group.ingest "$LOG_INGEST" || true
          aws logs describe-log-groups --log-group-name-prefix "$LOG_API" --query 'logGroups[?logGroupName==`'"$LOG_API"'`]' --output text | grep -q . \
            && terraform import -allow-missing-config aws_cloudwatch_log_group.api "$LOG_API" || true

          aws iam get-role --role-name "$ROLE_INGEST" >/dev/null 2>&1 \
            && terraform import -allow-missing-config aws_iam_role.ingest_role "$ROLE_INGEST" || true
          aws iam get-role --role-name "$ROLE_API" >/dev/null 2>&1 \
            && terraform import -allow-missing-config aws_iam_role.api_role "$ROLE_API" || true

          aws events describe-rule --name "$RULE_NAME" >/dev/null 2>&1 \
            && terraform import -allow-missing-config aws_cloudwatch_event_rule.schedule "$RULE_NAME" || true

          API_ID=$(aws apigatewayv2 get-apis --query "Items[?Name=='$API_NAME'].ApiId" --output text 2>/dev/null || true)
          [ -n "$API_ID" ] && [ "$API_ID" != "None" ] \
            && terraform import -allow-missing-config aws_apigatewayv2_api.http "$API_ID" || true

      - name: Terraform Apply
        working-directory: infra
        env:
          TF_VAR_project_name: ${{ env.PROJECT_NAME }}
          TF_VAR_region: ${{ env.AWS_REGION }}
          TF_VAR_github_owner: ${{ github.repository_owner }}
          TF_VAR_github_repo:  ${{ github.event.repository.name }}
          TF_VAR_sources_json: ${{ secrets.TF_VAR_sources_json }}
        run: |
          set -euo pipefail
          terraform apply -lock-timeout=5m -auto-approve

      - name: Show endpoints
        working-directory: infra
        run: terraform output

      # Best-effort cleanup if the job fails/cancels (prevents lingering lock)
      - name: Clear lock on failure/cancel (best-effort)
        if: failure() || cancelled()
        working-directory: infra
        run: |
          set -euo pipefail
          terraform init -lock-timeout=2m \
            -backend-config="bucket=${TFSTATE_BUCKET}" \
            -backend-config="key=${TFSTATE_KEY}" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=${TF_LOCK_TABLE}" \
            -backend-c
# ...everything you already have above...

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init (for plan/apply)
        working-directory: infra
        env:
          TF_VAR_project_name: ${{ env.PROJECT_NAME }}
          TF_VAR_region: ${{ env.AWS_REGION }}
          TF_VAR_github_owner: ${{ github.repository_owner }}
          TF_VAR_github_repo:  ${{ github.event.repository.name }}
          TF_VAR_sources_json: ${{ secrets.TF_VAR_sources_json }}
        run: |
          terraform init -upgrade -lock-timeout=5m \
            -backend-config="bucket=${TFSTATE_BUCKET}" \
            -backend-config="key=${TFSTATE_KEY}" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=${TF_LOCK_TABLE}" \
            -backend-config="encrypt=true"

      # >>> ADD THIS BLOCK <<<
      - name: Force unlock stale TF lock (one-time)
        working-directory: infra
        run: |
          set -euo pipefail
          terraform force-unlock -force 25987fdb-8820-15f5-6fa1-ca7403383f9f || true
# --------------------------------

      - name: Terraform Apply
        working-directory: infra
        env:
          TF_VAR_project_name: ${{ env.PROJECT_NAME }}
          TF_VAR_region: ${{ env.AWS_REGION }}
          TF_VAR_github_owner: ${{ github.repository_owner }}
          TF_VAR_github_repo:  ${{ github.event.repository.name }}
          TF_VAR_sources_json: ${{ secrets.TF_VAR_sources_json }}
        run: |
          set -euo pipefail
          terraform apply -lock-timeout=5m -auto-approve
