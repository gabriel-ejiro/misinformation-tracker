name: Deploy
on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  apply:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      AWS_REGION: eu-north-1
      AWS_DEFAULT_REGION: eu-north-1
    steps:
      - uses: actions/checkout@v4

      - name: Zip Lambdas
        run: |
          mkdir -p dist
          (cd lambdas/ingest && zip -r ../../dist/ingest.zip .)
          (cd lambdas/api    && zip -r ../../dist/api.zip .)

      - name: Configure AWS via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      # Ensure remote backend for Terraform state (idempotent)
      - name: Ensure remote backend (S3 + DynamoDB)
        env:
          TFSTATE_BUCKET: misinfo-tfstate-${{ env.AWS_REGION }}-misinfo
        run: |
          set -e

          # Create S3 bucket for TF state if missing
          if ! aws s3api head-bucket --bucket "$TFSTATE_BUCKET" 2>/dev/null; then
            aws s3api create-bucket --bucket "$TFSTATE_BUCKET" \
              --create-bucket-configuration LocationConstraint=${AWS_REGION}
          fi

          # Versioning + encryption for state bucket
          aws s3api put-bucket-versioning \
            --bucket "$TFSTATE_BUCKET" \
            --versioning-configuration Status=Enabled || true
          aws s3api put-bucket-encryption \
            --bucket "$TFSTATE_BUCKET" \
            --server-side-encryption-configuration '{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]}' || true

          # Create DynamoDB lock table if missing
          if ! aws dynamodb describe-table --table-name misinfo-tf-locks >/dev/null 2>&1; then
            aws dynamodb create-table \
              --table-name misinfo-tf-locks \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST
            aws dynamodb wait table-exists --table-name misinfo-tf-locks
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # Init backend without variables (pass concrete values via -backend-config)
      - name: Terraform Init
        working-directory: infra
        env:
          TF_VAR_github_owner: ${{ github.repository_owner }}
          TF_VAR_github_repo:  ${{ github.event.repository.name }}
          TF_VAR_sources_json: ${{ secrets.TF_VAR_sources_json }}
          TFSTATE_BUCKET: misinfo-tfstate-${{ env.AWS_REGION }}-misinfo
        run: |
          set -e
          cat > backend.tf <<'EOF'
          terraform {
            backend "s3" {}
          }
          EOF
          terraform init -upgrade \
            -backend-config="bucket=${TFSTATE_BUCKET}" \
            -backend-config="key=infra/terraform.tfstate" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=misinfo-tf-locks" \
            -backend-config="encrypt=true"

      # Best-effort imports for already-created resources (avoids "already exists" errors)
      - name: Terraform Imports (best-effort)
        working-directory: infra
        env:
          TABLE_NAME: misinfo-items
          LOG_INGEST: /aws/lambda/misinfo-ingest
          LOG_API: /aws/lambda/misinfo-api
          ROLE_INGEST: misinfo-ingest-role
          ROLE_API: misinfo-api-role
          RULE_NAME: misinfo-schedule
          API_NAME: misinfo-api
        run: |
          set -e

          # DynamoDB table
          if aws dynamodb describe-table --table-name "$TABLE_NAME" >/dev/null 2>&1; then
            terraform import -allow-missing-config aws_dynamodb_table.items "$TABLE_NAME" || true
          fi

          # CloudWatch log groups
          if aws logs describe-log-groups --log-group-name-prefix "$LOG_INGEST" --query 'logGroups[?logGroupName==`'"$LOG_INGEST"'`]' --output text | grep -q .; then
            terraform import -allow-missing-config aws_cloudwatch_log_group.ingest "$LOG_INGEST" || true
          fi
          if aws logs describe-log-groups --log-group-name-prefix "$LOG_API" --query 'logGroups[?logGroupName==`'"$LOG_API"'`]' --output text | grep -q .; then
            terraform import -allow-missing-config aws_cloudwatch_log_group.api "$LOG_API" || true
          fi

          # IAM roles
          if aws iam get-role --role-name "$ROLE_INGEST" >/dev/null 2>&1; then
            terraform import -allow-missing-config aws_iam_role.ingest_role "$ROLE_INGEST" || true
          fi
          if aws iam get-role --role-name "$ROLE_API" >/dev/null 2>&1; then
            terraform import -allow-missing-config aws_iam_role.api_role "$ROLE_API" || true
          fi

          # EventBridge rule
          if aws events describe-rule --name "$RULE_NAME" >/dev/null 2>&1; then
            terraform import -allow-missing-config aws_cloudwatch_event_rule.schedule "$RULE_NAME" || true
          fi

          # API Gateway v2 by name
          API_ID=$(aws apigatewayv2 get-apis --query "Items[?Name=='$API_NAME'].ApiId" --output text 2>/dev/null || true)
          if [ -n "$API_ID" ] && [ "$API_ID" != "None" ]; then
            terraform import -allow-missing-config aws_apigatewayv2_api.http "$API_ID" || true
          fi

      - name: Terraform Apply
        working-directory: infra
        env:
          TF_VAR_github_owner: ${{ github.repository_owner }}
          TF_VAR_github_repo:  ${{ github.event.repository.name }}
          TF_VAR_sources_json: ${{ secrets.TF_VAR_sources_json }}
        run: |
          set -e
          terraform apply -auto-approve

      - name: Show endpoints
        working-directory: infra
        run: terraform output

